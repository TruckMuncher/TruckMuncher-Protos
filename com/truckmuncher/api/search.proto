package com.truckmuncher.api.search;

import "com/truckmuncher/api/trucks.proto";
import "com/truckmuncher/api/menu.proto";

/**
 * The SearchService is used to offer full text search functionality to find trucks given filter criteria.
 */
service SearchService {

    /**
     * A simple search to find all trucks containing all terms in the given request
     */
    rpc simpleSearch (SimpleSearchRequest) returns (SimpleSearchResponse);
}

message SimpleSearchRequest {
    /**
     * A string containing any number of terms to search for
     */
    required string query = 1;

    /**
     * The number of results to return
     */
     optional int32 limit = 2 [default = 20];

     /**
     * The number of results to skip
     */
     optional int32 offset = 3 [default = 0];

     /**
      * A flag to signal to the API to NOT make spelling corrections and to search for the given query no matter
      * how many results are returned. First set this to false, then return the corrected results but offer the user 
      * the ability to say "no I actually meant to search for XXX, don't correct it this time". Then set this flag
      * to true.
      */
      optional bool skipCorrection = 4 [default = false];

      /**
       * Flag indicating if you want to restrict your search to gluten free items only
       */
      optional bool glutenFree = 5 [default = false];

      /**
       * Flag indicating if you want to restrict you search to items without peanuts only
       */
      optional bool peanutFree = 6 [default = false];
}

message SimpleSearchResponse {
    repeated SearchResponse searchResponse = 1;

    /**
     * The actual query used. May differ from the request query due to spelling corrections.
     * Use this to replace the query in the search bar and then offer suggestions
     */
    required string correctedQuery = 2;

    /**
     * A list of suggested spelling alternatives. This will be populated if your query was corrected and there are less than 10 results.
     * These will be in order of most likely first to least likely last
     */
    repeated string suggestions = 3;
}

message SearchResponse {
    /**
     * A short contextual blurb including the search term. This highlights why this search result was included
     */
    required string blurb = 1;

    /**
     * The truck included in this specific search result
     */
    required com.truckmuncher.api.trucks.Truck truck = 2;

    /**
     * The full menu belonging to the given truck
     */
    required com.truckmuncher.api.menu.Menu menu = 3;
}
