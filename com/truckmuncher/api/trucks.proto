package com.truckmuncher.api.trucks;

service TruckService {

    /**
     * Get the locations of active food trucks in the Region in which the search is performed.
     */
    rpc getActiveTrucks (ActiveTrucksRequest) returns (ActiveTrucksResponse);

    /**
     * Returns all trucks for the currently logged in user. A new truck will **not** be created
     * if one did not previously exist.
     *
     * This call requires Vendor authorization
     */
    rpc getTrucksForVendor (TrucksForVendorRequest) returns (TrucksForVendorResponse);

    /**
     * Get the profiles of all the food trucks in the user's Region.
     */
    rpc getTruckProfiles (TruckProfilesRequest) returns (TruckProfilesResponse);

    /**
     * Use this to create or update a truck. Any data sent in the request will be used, even if the truck did not previously exist.
     *
     * This call requires Vendor authorization
     */
    rpc modifyTruckProfile (ModifyTruckRequest) returns (Truck);

    /**
     * (alias for reportServingMode)
     * Modify the serving mode for a truck.
     *
     * This call requires user to be logged in
     */
    rpc modifyServingMode (ServingModeRequest) returns (ServingModeResponse);

    /**
     * Report serving mode status for a truck in a location
     *
     * This call requires user to be logged in
     */
    rpc reportServingMode (ServingModeRequest) returns (ServingModeResponse);

    /**
     * Requests that a truck gets approval from a member of our team to go live and get placed on the map.
     * 
     * This call requires Vendor authorization
     */
     rpc requestApproval (ApprovalRequest) returns (ApprovalResponse);

     /**
      * Requests the current status of your truck's approval process. 
      * 
      * This call requires Vendor authorization
      */
     rpc checkApprovalStatus (ApprovalStatusRequest) returns (ApprovalStatusResponse);
}

message ActiveTrucksRequest {
    /**
     * Value in the range [-90, 90]
     */
    required double latitude = 1;
    /**
     * Value in the range [-180, 180]
     */
    required double longitude = 2;
    optional string searchQuery = 3;
}

message ActiveTrucksResponse {
    repeated Truck trucks = 1;

    message Truck {
        /**
         * Suitable for unique identification.
         */
        required string id = 1;
        /**
         * Value in the range [-90, 90]
         */
        required double latitude = 2;
        /**
         * Value in the range [-180, 180]
         */
        required double longitude = 3;
        /** 
         * Indicates whether the truck's location is verified or not.
         */
        optional bool verified = 4;
        /**
         * Indicates the current upvote/downvote score.
         */
        optional int score = 5;
        /**
         * Signifies the user's vote for the truck. Positive numbers are upvotes, negatives are downvotes, anything else 
         * (null or 0) means that the user has not provided a vote.
         */
        optional bool userVote = 6;
    }
}

message TrucksForVendorRequest {
}

/**
 * The included trucks will always have a valid id.
 */
message TrucksForVendorResponse {
    repeated Truck trucks = 1;
    /**
     * If true, then a new Truck was created during this request. On native apps, this will need to be handled.
     * If false, the trucks previously existed.
     */
    required bool isNew = 2 [default = true];
}

message TruckProfilesRequest {
    /**
     * Value in the range [-90, 90]
     */
    required double latitude = 1;
    /**
     * Value in the range [-180, 180]
     */
    required double longitude = 2;
}

message TruckProfilesResponse {
    repeated Truck trucks = 1;
}

message ModifyTruckRequest {
    /**
     * Suitable for unique identification. Will always be set on a response from the API.
     */
    optional string id = 1;
    optional string name = 2;
    /**
     * These are likely going to be the cuisines the truck targets, but might also be something like "soup", "panini", or "vegan"
     */
    repeated string keywords = 3;
    /**
     * Hex code in the format of #RRGGBB
     */
    optional string primaryColor = 4;
    /**
     * Hex code in the format of #RRGGBB
     */
    optional string secondaryColor = 5;
    /**
     * A free-form description of the truck
     */
    optional string description = 6;
    /**
     * Should be in the format of (xxx) xxx-xxxx.
     */
    optional string phoneNumber = 7;
    
    optional string website = 8;
}

message Truck {
    /**
     * Suitable for unique identification. Will always be set on a response from the API.
     */
    optional string id = 1;
    optional string name = 2;
    optional string imageUrl = 3;
    /**
     * These are likely going to be the cuisines the truck targets, but might also be something like "soup", "panini", or "vegan"
     */
    repeated string keywords = 4;
    /**
     * Hex code in the format of #RRGGBB
     */
    optional string primaryColor = 5;
    /**
     * Hex code in the format of #RRGGBB
     */
    optional string secondaryColor = 6;
    /**
     * A free-form description of the truck
     */
    optional string description = 7;
    /**
     * Should be in the format of (xxx) xxx-xxxx.
     */
    optional string phoneNumber = 8;

    optional bool approved = 9;

    optional bool approvalPending = 10;
    
    optional string website = 11;
}

message ServingModeRequest {
    /**
     * Suitable for unique identification.
     */
    required string truckId = 1;
    required bool isInServingMode = 2;
    /**
     * Value in the range [-90, 90]
     */
    optional double truckLatitude = 3;
    /**
     * Value in the range [-180, 180]
     */
    optional double truckLongitude = 4;
}

message ServingModeResponse {
    /**
     * The id of the truck that was reported.
     */
    optional string truckId = 1;
    /**
     * Value in the range [-90, 90]
     */
    optional double latitude = 2;
    /**
     * Value in the range [-180, 180]
     */
    optional double longitude = 3;
    /**
     * The aggregated upvote/downvote score for the truck.
     */
    optional int currentScore = 4;
}

message ApprovalRequest {
    /**
     * Suitable for unique identification.
     */
    required string truckId = 1;

    /**
     * The best email address to contact the owner of the given truck.
     */
    required string email = 2;
}

message ApprovalResponse {
}

message ApprovalStatusRequest {
    /**
     * Suitable for unique identification.
     */
    required string truckId = 1;
}

message ApprovalStatusResponse {
    /**
     * The current status of your approval
     */
    required string status = 1;
}
